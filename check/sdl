#define DEBUG	0
if (sdl.Init()) {
    print("init error: %s\n", sdl.GetError());
    exit(1);
}
sdl.window_t win = sdl.CreateWindow("SDL example!",
				    sdl.WINDOWPOS_CENTERED,
				    sdl.WINDOWPOS_CENTERED,
				    640, 480,
				    sdl.WINDOW_SHOWN);
if (win == null) {
    print("create_window error: %s\n", sdl.GetError());
    exit(1);
}
#if DEBUG
print("\n\
window		%a\n\
x:		%d\n\
y:		%d\n\
w:		%d\n\
h:		%d\n\
min_w:		%d\n\
min_h:		%d\n\
max_w:		%d\n\
max_h:		%d\n\
flags:		%s%s%s%s%s%s%s%s%s%s%s%s%s\n\
title:		%#a\n\
brightness:	%d\n",
      win,
      win.x, win.y, win.w, win.h, win.min_w, win.min_h, win.max_w, win.max_h,
      win.flags & sdl.WINDOW_FULLSCREEN_DESKTOP ?
      (win.flags & sdl.WINDOW_FULLSCREEN_DESKTOP == sdl.WINDOW_FULLSCREEN_DESKTOP ?
       "FullscreenDesktop " : "Fullscreen ") : "",
      win.flags & sdl.WINDOW_OPENGL ? "OpenGL " : "",
      win.flags & sdl.WINDOW_SHOWN ? "Shown " : "",
      win.flags & sdl.WINDOW_HIDDEN ? "Hidden " : "",
      win.flags & sdl.WINDOW_BORDERLESS ? "Borderless " : "",
      win.flags & sdl.WINDOW_RESIZABLE ? "Resizable " : "",
      win.flags & sdl.WINDOW_MINIMIZED ? "Minimized " : "",
      win.flags & sdl.WINDOW_MAXIMIZED ? "Maximized " : "",
      win.flags & sdl.WINDOW_INPUT_GRABBED ? "InputGrabbed " : "",
      win.flags & sdl.WINDOW_INPUT_FOCUS ? "InputFocus " : "",
      win.flags & sdl.WINDOW_MOUSE_FOCUS ? "MouseFocus " : "",
      win.flags & sdl.WINDOW_FOREIGN ? "Foreign " : "",
      win.flags & sdl.WINDOW_ALLOW_HIGHDPI ? "AllowHighDpi " : "",
      win.title, win.brightness);
#endif
sdl.renderer_t ren = sdl.CreateRenderer(win, -1,
					sdl.RENDERER_ACCELERATED |
					sdl.RENDERER_PRESENTVSYNC);
if (ren == null) {
    print("create_renderer error: %s\n", sdl.GetError());
    exit(1);
}
#if DEBUG
print("\n\
renderer	%a\n\
target:		%a\n\
log_w:		%d\n\
log_h:		%d\n\
max_w:		%d\n\
max_h:		%d\n\
name:		%#s\n\
flags:		%s%s%s%s\n\
formats:	",
      ren,
      ren.target, ren.log_w, ren.log_h, ren.max_w, ren.max_h, ren.name,
      ren.flags & sdl.RENDERER_SOFTWARE ? "Software " : "",
      ren.flags & sdl.RENDERER_ACCELERATED ? "Accelerated " : "",
      ren.flags & sdl.RENDERER_PRESENTVSYNC ? "PresentVsync " : "",
      ren.flags & sdl.RENDERER_TARGETTEXTURE ? "TargetTexture " : "");
int32_t i;
for (i = 0; i < sizeof(ren.formats); ++i)
    print("%#x ", ren.formats[i]);
print("\n\
max_w:		%d\n\
max_h:		%d\n\
view_x:		%d\n\
view_y:		%d\n\
view_w:		%d\n\
view_h:		%d\n\
clip_x:		%d\n\
clip_y:		%d\n\
clip_w:		%d\n\
clip_h:		%d\n\
scale_x:	%d\n\
scale_y:	%d\n\
r:		%d\n\
g:		%d\n\
b:		%d\n\
a:		%d\n",
      ren.max_w, ren.max_h, ren.view_x, ren.view_y, ren.view_w, ren.view_h,
      ren.clip_x, ren.clip_y, ren.clip_w, ren.clip_h,
      ren.scale_x, ren.scale_y, ren.r, ren.g, ren.b, ren.a);
if (ren.blend)
    print("\
blend:		%s%s%s\n",
	  ren.blend & sdl.BLENDMODE_BLEND ? "Blend " : "",
	  ren.blend & sdl.BLENDMODE_ADD ? "Add " : "",
	  ren.blend & sdl.BLENDMODE_MOD ? "Mod " : "");
else
    print("\
blend:		None\n");
print("\n\
get_window_renderer(win) = %a\n\
get_renderer_window(ren) = %a\n",
      sdl.GetWindowRenderer(win), sdl.GetRendererWindow(ren));
#endif
sdl.texture_t bg = sdl.LoadTexture(ren, "check/0.png");
if (bg == null) {
    print("load_texture error: %s\n", sdl.GetError());
    exit(1);
}
#if DEBUG
print("\n\
texture\n\
format:		%#x\n\
access:		%s\n\
w:		%d\n\
h:		%d\n\
r:		%#x\n\
g:		%#x\n\
b:		%#x\n\
a:		%#x\n",
      bg.format,
      bg.access == sdl.TEXTUREACCESS_STATIC ? "Static" :
      bg.access == sdl.TEXTUREACCESS_STREAMING ? "Streaming" :
      bg.access == sdl.TEXTUREACCESS_TARGET ? "Target" : "???",
      bg.w, bg.h, bg.r, bg.g, bg.b, bg.a);
if (bg.blend)
    print("\
blend:		%s%s%s\n",
	  bg.blend & sdl.BLENDMODE_BLEND ? "Blend " : "",
	  bg.blend & sdl.BLENDMODE_ADD ? "Add " : "",
	  bg.blend & sdl.BLENDMODE_MOD ? "Mod " : "");
else
    print("\
blend:		None\n");
#endif
sdl.texture_t fg = sdl.LoadTexture(ren, "check/1.png");
if (fg == null) {
    print("load_texture error: %s\n", sdl.GetError());
    exit(1);
}
#if DEBUG
print("\n\
texture\n\
format:		%#x\n\
access:		%s\n\
w:		%d\n\
h:		%d\n\
r:		%#x\n\
g:		%#x\n\
b:		%#x\n\
a:		%#x\n",
      fg.format,
      fg.access == sdl.TEXTUREACCESS_STATIC ? "Static" :
      fg.access == sdl.TEXTUREACCESS_STREAMING ? "Streaming" :
      fg.access == sdl.TEXTUREACCESS_TARGET ? "Target" : "???",
      fg.w, fg.h, fg.r, fg.g, fg.b, fg.a);
if (fg.blend)
    print("\
blend:		%s%s%s\n",
	  fg.blend & sdl.BLENDMODE_BLEND ? "Blend " : "",
	  fg.blend & sdl.BLENDMODE_ADD ? "Add " : "",
	  fg.blend & sdl.BLENDMODE_MOD ? "Mod " : "");
else
    print("\
blend:		None\n");
#endif

#if DEBUG
int32_t points[] = { 50, 10, 60, 20, 70, 30 };
int32_t lines[] = { 150, 10, 160, 30, 170, 20 };
int32_t draw_rects[] = { 180, 10, 10, 10, 190, 20, 10, 10 };
int32_t fill_rects[] = { 200, 10, 10, 10, 210, 20, 10, 10 };
for (i = 0; i < 2; ++i) {
    sdl.RenderDrawPoint(ren, 10, 10);
    sdl.RenderDrawPoints(ren, points);
    sdl.RenderDrawLine(ren, 20, 20, 40, 40);
    sdl.RenderDrawLines(ren, lines);
    sdl.RenderDrawRect(ren, 20, 10, 10, 10);
    sdl.RenderDrawRects(ren, draw_rects);
    sdl.RenderFillRect(ren, 30, 10, 10, 10);
    sdl.RenderFillRects(ren, fill_rects);
    sdl.RenderPresent(ren);
    sdl.Delay(1000);
    ren.r = 0xff;	ren.g = 0;	ren.b = 0;	ren.a = 0xff;
    if (sdl.ChangeRenderer(ren)) {
	print("change_renderer error: %s\n", sdl.GetError());
	exit(1);
    }
}

sdl.surface_t tsf = sdl.CreateRGBASurface(256, 256);
print("\nrgba surface\n\
w:		%d\n\
h:		%d\n\
r_mask:		%#10x\n\
g_mask:		%#10x\n\
b_mask:		%#10x\n\
a_mask:		%#10x\n\
r:		%#x\n\
g:		%#x\n\
b:		%#x\n\
a:		%#x\n\
clip_x:		%d\n\
clip_y:		%d\n\
clip_w:		%d\n\
clip_h:		%d\n\
key:		%#x\n",
      tsf.w, tsf.h, tsf.r_mask, tsf.g_mask, tsf.b_mask, tsf.a_mask,
      tsf.r, tsf.g, tsf.b, tsf.a, tsf.clip_x, tsf.clip_y,
      tsf.clip_w, tsf.clip_h, tsf.key);
if (tsf.blend)
    print("\
blend:		%s%s%s\n",
	  tsf.blend & sdl.BLENDMODE_BLEND ? "Blend " : "",
	  tsf.blend & sdl.BLENDMODE_ADD ? "Add " : "",
	  tsf.blend & sdl.BLENDMODE_MOD ? "Mod " : "");
else
    print("\
blend:		None\n");
sdl.PullSurface(tsf);
uint8_t pixels[] = tsf.pixels;
int32_t j, c;
for (i = c = 0; i < 256 * 256 * 4; i += 256 * 4, ++c) {
    for (j = 0; j < 256 * 4; j += 4) {
	pixels[i + j] = c;
	pixels[i + j + 1] = c;
	pixels[i + j + 2] = c;
	pixels[i + j + 3] = 0xff;
    }
}
pixels = null;
sdl.PushSurface(tsf);
sdl.texture_t tsr = sdl.CreateTextureFromSurface(ren, tsf);
sdl.FreeSurface(tsf);
sdl.rect_t tr0 = { 0, 0, 256, 256 };
sdl.RenderCopy(ren, tsr, null, tr0);
sdl.RenderPresent(ren);
sdl.Delay(1000);
sdl.DestroyTexture(tsr);

tsf = sdl.CreateRGBSurface(256, 256);
print("\nrgb surface\n\
w:		%d\n\
h:		%d\n\
r_mask:		%#10x\n\
g_mask:		%#10x\n\
b_mask:		%#10x\n\
a_mask:		%#10x\n\
r:		%#x\n\
g:		%#x\n\
b:		%#x\n\
a:		%#x\n\
clip_x:		%d\n\
clip_y:		%d\n\
clip_w:		%d\n\
clip_h:		%d\n\
key:		%#x\n",
      tsf.w, tsf.h, tsf.r_mask, tsf.g_mask, tsf.b_mask, tsf.a_mask,
      tsf.r, tsf.g, tsf.b, tsf.a, tsf.clip_x, tsf.clip_y,
      tsf.clip_w, tsf.clip_h, tsf.key);
if (tsf.blend)
    print("\
blend:		%s%s%s\n",
	  tsf.blend & sdl.BLENDMODE_BLEND ? "Blend " : "",
	  tsf.blend & sdl.BLENDMODE_ADD ? "Add " : "",
	  tsf.blend & sdl.BLENDMODE_MOD ? "Mod " : "");
else
    print("\
blend:		None\n");
sdl.PullSurface(tsf);
pixels = tsf.pixels;
for (i = 0, c = 255; i < 256 * 256 * 3; i += 256 * 3, --c) {
    for (j = 0; j < 256 * 3; j += 3) {
	pixels[i + j] = c;
	pixels[i + j + 1] = c;
	pixels[i + j + 2] = c;
    }
}
pixels = null;
sdl.PushSurface(tsf);
tsr = sdl.CreateTextureFromSurface(ren, tsf);
sdl.FreeSurface(tsf);
sdl.RenderCopy(ren, tsr, null, tr0);
sdl.RenderPresent(ren);
sdl.Delay(1000);
sdl.DestroyTexture(tsr);
#endif

/* do not fail below if this does not exist
$ rpm -qf /usr/share/fonts/gnu-free/FreeSans.ttf
gnu-free-sans-fonts-20120503-8.fc20.noarch
 */
ttf.font_t fnt = ttf.OpenFont("/usr/share/fonts/gnu-free/FreeSans.ttf", 25);
sdl.color_t col = { 0xdd, 0xaa, 0x33 };
sdl.texture_t txt;
float64_t angle = 0;
if (fnt) {
#if DEBUG
    print("\n\
font\n\
style:		");
    if (fnt.style == 0)
	print("Normal");
    else {
	if (fnt.style & ttf.STYLE_BOLD)
	    print("Bold ");
	if (fnt.style & ttf.STYLE_ITALIC)
	    print("Italic ");
	if (fnt.style & ttf.STYLE_UNDERLINE)
	    print("Underline ");
	if (fnt.style & ttf.STYLE_STRIKETHROUGH)
	    print("Strikethrough");
    }
    print("\n\
hinting:	");
    switch (fnt.hinting) {
	case ttf.HINTING_NORMAL:
	    print("Normal");
	    break;
	case ttf.HINTING_LIGHT:
	    print("Light");
	    break;
	case ttf.HINTING_MONO:
	    print("Mono");
	    break;
	case ttf.HINTING_NONE:
	    print("None");
	    break;
	default:
	    print("???");
	    break;
    }
    print("\n\
kerning:	%s\n\
outline:	%d\n\
height:		%d\n\
ascent:		%d\n\
descent:	%d\n\
skip:		%d\n\
faces:		%d\n\
style_name:	%#s\n\
family_name:	%#s\n\
fixed:		%s\n",
	  fnt.kerning ? "true" : "false", fnt.outline, fnt.height,
	  fnt.ascent, fnt.descent, fnt.skip, fnt.faces, fnt.style_name,
	  fnt.family_name, fnt.fixed ? "true" : "false");
#endif
    string_t str = "Hello world!";
    sdl.surface_t srf = ttf.RenderText_Blended(fnt, str, col);
    txt = sdl.CreateTextureFromSurface(ren, srf);
    if (txt == null) {
	print("create_texture_from_surface error: %s\n", sdl.GetError());
	exit(1);
    }
#if DEBUG
print("\n\
texture\n\
format:		%#x\n\
access:		%s\n\
w:		%d\n\
h:		%d\n\
r:		%#x\n\
g:		%#x\n\
b:		%#x\n\
a:		%#x\n",
      txt.format,
      txt.access == sdl.TEXTUREACCESS_STATIC ? "Static" :
      txt.access == sdl.TEXTUREACCESS_STREAMING ? "Streaming" :
      txt.access == sdl.TEXTUREACCESS_TARGET ? "Target" : "???",
      txt.w, txt.h, txt.r, txt.g, txt.b, txt.a);
if (bg.blend)
    print("\
blend:		%s%s%s\n",
	  txt.blend & sdl.BLENDMODE_BLEND ? "Blend " : "",
	  txt.blend & sdl.BLENDMODE_ADD ? "Add " : "",
	  txt.blend & sdl.BLENDMODE_MOD ? "Mod " : "");
else
    print("\
blend:		None\n");
#endif
    sdl.FreeSurface(srf);
    ttf.CloseFont(fnt);
}

sdl.rect_t rec = { 0, 0, fg.w, fg.h };
if (txt)
    sdl.point_t piv = { txt.w \ 2, txt.h \ 2 };
sdl.rect_t trc;
if (txt)
    trc = { 320 - txt.w \ 2, 240 - txt.h \ 2, txt.w, txt.h };
void paint() {
    sdl.RenderClear(ren);
    sdl.rect_t dst = { 0, 0, bg.w, bg.h };
    int32_t x, y;
    for (x = 0; x < 640; x+= 64) {
	dst.x = x;
	for (y = 0; y < 480; y+= 64) {
	    dst.y = y;
	    sdl.RenderCopy(ren, bg, null, dst);
	}
    }
    if (txt)
	sdl.RenderCopyEx(ren, txt, null, trc, angle, piv, sdl.FLIP_NONE);
    sdl.RenderCopy(ren, fg, null, rec);
    sdl.RenderPresent(ren);
}

sdl.timer_t timer;
int8_t kstate;
#define LEFT			1
#define RIGHT			2
#define UP			4
#define DOWN			8
void kupdate() {
    if (kstate == 0) {
	if (timer) {
	    sdl.RemoveTimer(timer);
	    timer = null;
	}
    }
    else if (timer == null)
	timer = sdl.AddTimer(10, null);
}

int8_t ktimer() {
    int8_t change = false;
    if (kstate & LEFT) {
	if (rec.x > 0) {
	    --rec.x;
	    change = true;
	}
	--angle;
    }
    if (kstate & RIGHT) {
	if (rec.x < 640 - 64) {
	    ++rec.x;
	    change = true;
	}
	++angle;
    }
    if (kstate & UP) {
	if (rec.y > 0) {
	    --rec.y;
	    change = true;
	}
	if (txt)
	    --trc.y;
    }
    if (kstate & DOWN) {
	if (rec.y < 480 - 64) {
	    ++rec.y;
	    change = true;
	}
	if (txt)
	    ++trc.y;
    }
    return change;
}

int8_t done = false, change;
sdl.event_t e = new sdl.event_t;
while (!done) {
    if (!sdl.WaitEvent(e))
	continue;
    change = false;
    switch (e.type) {
	case sdl.QUIT:
	    done = true;
	    break;
	case sdl.WINDOWEVENT:
	    change = true;
	    break;
	case sdl.KEYDOWN:
	    if (e.repeat == false) {
		switch (e.keysym) {
		    case sdl.K_LEFT:
			kstate &= ~RIGHT;
			kstate |= LEFT;
			kupdate();
			change = ktimer();
			break;
		    case sdl.K_RIGHT:
			kstate &= ~LEFT;
			kstate |= RIGHT;
			kupdate();
			change = ktimer();
			break;
		    case sdl.K_UP:
			kstate &= ~DOWN;
			kstate |= UP;
			kupdate();
			change = ktimer();
			break;
		    case sdl.K_DOWN:
			kstate &= ~UP;
			kstate |= DOWN;
			kupdate();
			change = ktimer();
			break;
		    case sdl.K_ESCAPE:
			done = true;
			break;
		}
	    }
	    break;
	case sdl.KEYUP:
	    switch (e.keysym) {
		case sdl.K_LEFT:
		    kstate &= ~LEFT;
		    kupdate();
		    break;
		case sdl.K_RIGHT:
		    kstate &= ~RIGHT;
		    kupdate();
		    break;
		case sdl.K_UP:
		    kstate &= ~UP;
		    kupdate();
		    break;
		case sdl.K_DOWN:
		    kstate &= ~DOWN;
		    kupdate();
		    break;
	    }
	    break;
	case sdl.MOUSEBUTTONDOWN:
	    if (e.button == sdl.BUTTON_LEFT) {
		rec.x = e.x - 32;
		rec.y = e.y - 32;
		change = true;
	    }
	    break;
	case sdl.MOUSEMOTION:
	    if (e.state & sdl.BUTTON_LMASK) {
		rec.x = e.x - 32;
		rec.y = e.y - 32;
		change = true;
	    }
	    break;
	case sdl.TIMEREVENT:
	    change = ktimer();
	    break;
    }
    if (change)
	paint();
}

mix.audio_t au;
au = mix.OpenAudio(mix.DEFAULT_FREQUENCY, mix.DEFAULT_FORMAT,
		   mix.DEFAULT_CHANNELS, 1024);
if (au) {
#if DEBUG
    print("\
audio\n\
au.frequency:	%d (%d)\n\
au.format:	%d (%d)\n\
au.channels:	%d (%d)\n",
	  au.frequency, mix.DEFAULT_FREQUENCY,
	  au.format, mix.DEFAULT_FORMAT,
	  au.channels, mix.DEFAULT_CHANNELS);
#endif
    //sdl.allocate_channels(0);
    //sdl.volume_music(64);
    /* do not fail below if this does not exist
	$ rpm -qf /usr/share/sounds/KDE-K3B-Finish-Success.ogg
	kde-runtime-4.12.97-1.fc21.x86_64
	$ rpm -qf /usr/share/sounds/freedesktop/stereo/complete.oga
	sound-theme-freedesktop-0.8-3.fc20.noarch
     */
    // distorted output, sdl_mixer issue?
    //sdl.music_t mus = sdl.load_music("/usr/share/sounds/KDE-K3B-Finish-Success.ogg");
    // this looks (sounds) a lot better
    mix.music_t mus = mix.LoadMusic("/usr/share/sounds/freedesktop/stereo/complete.oga");
    if (mus != null) {
#if DEBUG
	print("\
music\n\
type:		");
	switch (mus.type) {
	    case mix.MUS_NONE:
		print("None");
		break;
	    case mix.MUS_CMD:
		print("None");
		break;
	    case mix.MUS_WAV:
		print("Wav");
		break;
	    case mix.MUS_MOD:
		print("Mod");
		break;
	    case mix.MUS_MID:
		print("Mid");
		break;
	    case mix.MUS_OGG:
		print("Ogg");
		break;
	    case mix.MUS_MP3:
		print("Mp3");
		break;
	    case mix.MUS_MP3_MAD:
		print("Mp3Mad");
		break;
	    case mix.MUS_FLAC:
		print("Flac");
		break;
	    case mix.MUS_MODPLUG:
		print("Modlug");
		break;
	    default:
		print("???");
		break;
	}
	print("\n");
#endif
	if (mix.PlayMusic(mus, 0))
	    print("%s\n", sdl.GetError());
#if 0
	/* Poll every 10 ms */
	while (mix.PlayingMusic())
	    sdl.delay(10);
#else
	/* Wait music finished event */
	done = false;
	while (!done) {
	    if (!sdl.WaitEvent(e))
		continue;
	    if (e.type == sdl.MUSICFINISHEDEVENT)
		done = true;
	}
#endif
	mix.HaltMusic();
	mix.FreeMusic(mus);
    }
    else
	print("%s\n", sdl.GetError());

    /*
	$ rpm -qf /usr/share/sounds/pop.wav
	kde-workspace-4.11.8-1.fc21.x86_64
     */
    mix.chunk_t chu = mix.LoadChunk("/usr/share/sounds/pop.wav");
    if (chu) {
	int32_t cha = mix.PlayChannel(-1, chu, 0);
#if 0
	sdl.delay(100);
#else
	/* Wait channel finished event */
	done = false;
	while (!done) {
	    if (!sdl.WaitEvent(e))
		continue;
	    if (e.type == sdl.CHANNELFINISHEDEVENT) {
#if DEBUG
		print("channel finished: cha = %d, e.channel = %d\n",
		      cha, e.channel);
#endif
		done = true;
	    }
	}
#endif
	mix.HaltChannel(cha);
	mix.FreeChunk(chu);
    }

    mix.CloseAudio();
}
if (txt)
    sdl.DestroyTexture(txt);
sdl.DestroyTexture(fg);
sdl.DestroyTexture(bg);
sdl.DestroyRenderer(ren);
sdl.DestroyWindow(win);
sdl.Quit();
