/* http://benchmarksgame.alioth.debian.org/u32q/program.php?test=nbody&lang=gcc&id=6 */

/* The Computer Language Benchmarks Game
 * http://benchmarksgame.alioth.debian.org/
 *
 * contributed by Christoph Bauer
 * modified by Danny Angelo Carminati Grein
 *  
 */

#define pi 3.141592653589793
#define solar_mass (4 * pi * pi)
#define days_per_year 365.24

class planet {
  float64_t x, y, z;
  float64_t vx, vy, vz;
  float64_t mass;
};

void advance(int32_t nbodies, planet bodies[], float64_t dt)
{
  int32_t i, j;
  planet b, b2;

  for (i = 0; i < nbodies; i++) {
    b = bodies[i];
    for (j = i + 1; j < nbodies; j++) {
      b2 = bodies[j];
      float64_t dx = b.x - b2.x;
      float64_t dy = b.y - b2.y;
      float64_t dz = b.z - b2.z;
      float64_t distanced = dx * dx + dy * dy + dz * dz;
      float64_t distance = sqrt(distanced);
      float64_t mag = dt / (distanced * distance);
      b.vx -= dx * b2.mass * mag;
      b.vy -= dy * b2.mass * mag;
      b.vz -= dz * b2.mass * mag;
      b2.vx += dx * b.mass * mag;
      b2.vy += dy * b.mass * mag;
      b2.vz += dz * b.mass * mag;
    }
  }
  for (i = 0; i < nbodies; i++) {
    b = bodies[i];
    b.x += dt * b.vx;
    b.y += dt * b.vy;
    b.z += dt * b.vz;
  }
}

float64_t energy(int32_t nbodies, planet bodies[])
{
  float64_t e;
  int32_t i, j;
  planet b, b2;

  e = 0.0;
  for (i = 0; i < nbodies; i++) {
    b = bodies[i];
    e += 0.5 * b.mass * (b.vx * b.vx + b.vy * b.vy + b.vz * b.vz);
    for (j = i + 1; j < nbodies; j++) {
      b2 = bodies[j];
      float64_t dx = b.x - b2.x;
      float64_t dy = b.y - b2.y;
      float64_t dz = b.z - b2.z;
      float64_t distance = sqrt(dx * dx + dy * dy + dz * dz);
      e -= (b.mass * b2.mass) / distance;
    }
  }
  return e;
}

void offset_momentum(int32_t nbodies, planet bodies[])
{
  float64_t px = 0.0, py = 0.0, pz = 0.0;
  int32_t i;
  for (i = 0; i < nbodies; i++) {
    px += bodies[i].vx * bodies[i].mass;
    py += bodies[i].vy * bodies[i].mass;
    pz += bodies[i].vz * bodies[i].mass;
  }
  bodies[0].vx = - px / solar_mass;
  bodies[0].vy = - py / solar_mass;
  bodies[0].vz = - pz / solar_mass;
}

#define NBODIES 5
planet bodies[NBODIES] = {
  {                               /* sun */
    0, 0, 0, 0, 0, 0, solar_mass
  },
  {                               /* jupiter */
    4.84143144246472090e+00,
    -1.16032004402742839e+00,
    -1.03622044471123109e-01,
    1.66007664274403694e-03 * days_per_year,
    7.69901118419740425e-03 * days_per_year,
    -6.90460016972063023e-05 * days_per_year,
    9.54791938424326609e-04 * solar_mass
  },
  {                               /* saturn */
    8.34336671824457987e+00,
    4.12479856412430479e+00,
    -4.03523417114321381e-01,
    -2.76742510726862411e-03 * days_per_year,
    4.99852801234917238e-03 * days_per_year,
    2.30417297573763929e-05 * days_per_year,
    2.85885980666130812e-04 * solar_mass
  },
  {                               /* uranus */
    1.28943695621391310e+01,
    -1.51111514016986312e+01,
    -2.23307578892655734e-01,
    2.96460137564761618e-03 * days_per_year,
    2.37847173959480950e-03 * days_per_year,
    -2.96589568540237556e-05 * days_per_year,
    4.36624404335156298e-05 * solar_mass
  },
  {                               /* neptune */
    1.53796971148509165e+01,
    -2.59193146099879641e+01,
    1.79258772950371181e-01,
    2.68067772490389322e-03 * days_per_year,
    1.62824170038242295e-03 * days_per_year,
    -9.51592254519715870e-05 * days_per_year,
    5.15138902046611451e-05 * solar_mass
  }
};

int32_t n = 1000;
int32_t i;

offset_momentum(NBODIES, bodies);
print ("%.9f\n", energy(NBODIES, bodies));
for (i = 1; i <= n; i++)
  advance(NBODIES, bodies, 0.01);
print ("%.9f\n", energy(NBODIES, bodies));
