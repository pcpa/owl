class Vector3D {
    float64_t	x;
    float64_t	y;
    float64_t	z;

    Vector3D set(Vector3D v) {
	x = v.x;
	y = v.y;
	z = v.z;
	return this;
    }
    Vector3D add(Vector3D v) {
	Vector3D r = { x + v.x, y + v.y, z + v.z };
	return r;
    }
    Vector3D sub(Vector3D v) {
	Vector3D r = { x - v.x, y - v.y, z - v.z };
	return r;
    }
    Vector3D mul(float64_t s) {
	Vector3D r = { x * s, y * s, z * s };
	return r;
    }
    Vector3D div(float64_t s) {
	Vector3D r = { x / s, y / s, z / s };
	return r;
    }
    Vector3D addeq(Vector3D v) {
	x += v.x;
	y += v.y;
	z += v.z;
	return this;
    }
    Vector3D subeq(Vector3D v) {
	x -= v.x;
	y -= v.y;
	z -= v.z;
	return this;
    }
    Vector3D muleq(float64_t s) {
	x *= s;
	y *= s;
	z *= s;
	return this;
    }
    Vector3D diveq(float64_t s) {
	x /= s;
	y /= s;
	z /= s;
	return this;
    }
    Vector3D neg() {
	Vector3D r = { -x, -y, -z };
	return r;
    }
    Vector3D negeq() {
	x = -x;
	y - -y;
	z = -z;
	return this;
    }
    float64_t length() {
	return sqrt(x * x + y * y + z * z);
    }
    // unitize() normalizes this Vector3D that its direction
    // remains the same but its length is 1.
    void unitize() {
	float64_t len = length();
	if (len != 0) {
	    x /= len;
	    y /= len;
	    z /= len;
	}
    }
    // unit() returns a new Vector3D. The returned value is a
    // unitized version of this Vector3D.
    Vector3D unit() {
	float64_t len = length();
	if (len == 0)
	    return this;
	Vector3D r = { x / len, y / len, z / len };
	return r;
    }
};

class Mass {
    float64_t	m;		// The mass value
    Vector3D	pos;		// Position in space
    Vector3D	vel;		// Velocity
    Vector3D	force;		// Force applied on this mass at an instance
    Vector3D	tmp;		// avoid gc'ing

    Mass() {
	pos	= new Vector3D;
	vel	= new Vector3D;
	force	= new Vector3D;
	tmp	= new Vector3D;
    }
    /* Add external force to the mass. 
     * At an instance in time, several sources of force might affect the mass.
     * The vector sum  of these forces make up the net force applied to the
     mass at the instance. */
    void applyForce(Vector3D f) {
	// The external force is added to the force of the mass
	force.addeq(f);
    }
    /* Set the force values to zero. */
    void init() {
	force.x = 0;
	force.y = 0;
	force.z = 0;
    }
    /* Calculate the new velocity and new position of  the mass according to
     * change in time (dt). Here, a simulation method called "The Euler Method"
     * is used. The Euler Method is not always accurate, but it is simple. It
     * is suitable for most of physical simulations that we know in common 
     * computer and video games. */
    void simulate(float64_t dt) {
	// Change in velocity is added to the velocity.
	// The change is proportinal with the acceleration (force / m)
	// and change in time
	/* vel += (force / m) * dt; */
	vel.addeq(tmp.set(force).diveq(m).muleq(dt));

	// Change in position is added to the position.
	/* pos += vel * dt; */
	pos.addeq(tmp.set(vel).muleq(dt));
    }
};

class Simulation {
    Mass	masses[];
    Vector3D	tmp;		// avoid gc'ing
    Simulation() {
	tmp	= new Vector3D;
    }
    Simulation setup(int32_t numOfMasses, float64_t m) {
	masses = new Mass[numOfMasses];
	for (--numOfMasses; numOfMasses >= 0; --numOfMasses)
	    masses[numOfMasses] = { m };
    }
    void init() {
	int32_t		a;
	for (a = 0; a < sizeof(masses); ++a)
	    masses[a].init();
    }
    // no implementation because no forces are wanted in this basic container
    void solve() {
	// in advanced containers,
	// this method will be overrided and some forces will act on masses
    }
    // Iterate the masses by the change in time
    void simulate(float64_t dt) {
	int32_t		a;
	// We will iterate every mass
	for (a = 0; a < sizeof(masses); ++a)
	    // Iterate the mass and obtain new position and new velocity
	    masses[a].simulate(dt);
    }
    // The complete procedure of simulation
    void operate(float64_t dt) {
	init();		// Step 1: reset forces to zero
	solve();	// Step 2: apply forces
	simulate(dt);	// Step 3: iterate the masses by the change in time
    }
};

/* ConstantVelocity is derived from Simulation
 * It creates 1 mass with mass value 1 kg and sets its
 *  velocity to (1.0, 0.0, 0.0) so that the mass moves in
 * the x direction with 1 m/s velocity. */
class ConstantVelocity : Simulation
{
    ConstantVelocity() {
	// setup super class with 1 mass and 1 kg
	setup(1, 1.0);
	// a mass was created with its position at the origin
	// we set the mass's velocity to (1.0, 0.0, 0.0)
	masses[0].vel.x =  1;
    }
};

/* MotionUnderGravitation is derived from Simulation
 * It creates 1 mass with mass value 1 kg and sets its velocity to
 * (10.0, 15.0, 0.0) and its position to  (-10.0, 0.0, 0.0). The purpose of
 * this application is to apply a gravitational force to the mass and 
 * observe the path it follows. The above velocity and position provides a
 * fine projectile path with a  9.81 m/s/s downward gravitational acceleration.
 * 9.81 m/s/s is a very close value to the gravitational  acceleration we
 * experience on the earth. */
class MotionUnderGravitation : Simulation {
    Vector3D	gravitation;		// the gravitational acceleration

    MotionUnderGravitation() {
	setup(1, 1.0);
	if (gravitation == null)	gravitation = new Vector3D;
	masses[0].pos.x = -10;
	masses[0].vel.x =  10;
	masses[0].vel.y =  15;
    }
    // gravitational force will be applied therefore we need a "solve" method.
    void solve() {
	int32_t		a;
	// we will apply force to all masses (actually we have 1 mass,
	// but we can extend it in the future)
	for (a = 0; a < sizeof(masses); ++a) {
	    // gravitational force is as F = m * g.
	    // (mass times the gravitational acceleration)
	    /* masses[a].applyForce(gravitation * masses[a].m); */
	    tmp.set(gravitation).muleq(masses[a].m);
	    masses[a].applyForce(tmp);
	}
    }
};

/* MassConnectedWithSpring is derived from Simulation
 * It creates 1 mass with mass value 1 kg and binds the mass to an arbitrary
 * constant point with a spring.
 * This point is refered as the connectionPos and the spring has a
 * springConstant value to represent its stiffness.
*/
class MassConnectedWithSpring : Simulation {
    float64_t	springConstant;		// more the springConstant, stiffer the spring force
    Vector3D	connectionPos;		// the arbitrary constant point that the mass is connected

    MassConnectedWithSpring() {
	setup(1, 1.0);

	connectionPos = { 0.0, -5.5, 0.0 };
	// set the position of the mass 10 meters to the right side
	// of the connectionPos
	/* masses[0].pos = connectionPos + Vector3D(10.0, 0.0, 0.0); */
	masses[0].pos.x = 10;
	masses[0].pos.y =  0;
	masses[0].pos.z =  0;
	masses[0].pos.addeq(connectionPos);
    }

    // the spring force will be applied
    void solve() {
	int32_t		a;
	// we will apply force to all masses (actually we have 1 mass,
	// but we can extend it in the future)
	for (a = 0; a < sizeof(masses); ++a) {
	    // find a vector from the position of the mass to the connectionPos
	    tmp.set(masses[a].pos).subeq(connectionPos);
	    // apply the force according to the famous spring force formulation
	    masses[a].applyForce(tmp.negeq().muleq(springConstant));
	}
    }
};

ConstantVelocity constantVelocity = new ConstantVelocity;
MotionUnderGravitation motionUnderGravitation = {
    gravitation: { 0.0, -9.81, 0.0 }
};
MassConnectedWithSpring massConnectedWithSpring = {
    springConstant: 2.0
};
// slowMotionRatio Is A Value To Slow Down The Simulation, Relative To
// Real World Time
float64_t	slowMotionRatio = 10.0;
// Elapsed Time In The Simulation (Not Equal To Real World's Time Unless
//slowMotionRatio Is 1
float64_t	timeElapsed;
uint32_t	time, timeprev;			// For calculating elapsed time
string_t	s = {};

uint32_t		base;
uint32_t		texture[1] = {};
sdl.window_t		win;
sdl.gl.context_t	ctx;

void BuildFont() {
    gl.GenTextures(texture);
    sdl.surface_t	surface = sdl.LoadSurface("nehe/lesson39/Font.tga");
    if (surface) {
	gl.BindTexture(gl.TEXTURE_2D, texture[0]);
	gl.TexParameter(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
	gl.TexParameter(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
	sdl.gl.TexImage2D(surface);
	sdl.FreeSurface(surface);
	int32_t		loop;
	base = gl.GenLists(95);
	gl.BindTexture(gl.TEXTURE_2D, texture[0]);
	for (loop = 0; loop < 95; ++loop) {
	    float64_t cx = (loop % 16) / 16.0;
	    float64_t cy = (loop \ 16) / 8.0;
	    gl.NewList(base + loop, gl.COMPILE);
	    {
		gl.Begin(gl.QUADS);
		{
		    gl.TexCoord2(cx,	  cy + 0.120);	   gl.Vertex2( 0,  0);
		    gl.TexCoord2(cx + 0.0625, cy + 0.120); gl.Vertex2(16,  0);
		    gl.TexCoord2(cx + 0.0625, cy);	   gl.Vertex2(16, 16);
		    gl.TexCoord2(cx,	  cy);		   gl.Vertex2( 0, 16);
		}
		gl.End();
		gl.Translate(10, 0, 0);
	    }
	    gl.EndList();
	}
    }
}

void text(float64_t x, float64_t y, string_t string) {
    int32_t	i;
    uint32_t	list[] = new uint32_t[sizeof(string)];
    for (i = sizeof(string) - 1; i >= 0; --i)
	list[i] = string[i];
    gl.PushMatrix();
    gl.Enable(gl.TEXTURE_2D);
    gl.BindTexture(gl.TEXTURE_2D, texture[0]);
    gl.Translate(x, y, 0);
    gl.ListBase(base - 32);
    gl.Scale(0.05, 0.05, 1);
    gl.CallLists(list);
    gl.Disable(gl.TEXTURE_2D);
    gl.PopMatrix();
}

void ReSizeGLScene() {
    gl.Viewport(0, 0, win.w, win.h);
    gl.MatrixMode(gl.PROJECTION);
    gl.LoadIdentity();
    glu.Perspective(45.0, win.w / win.h, 0.1, 100.0);
    gl.MatrixMode(gl.MODELVIEW);
}

void InitGL() {
    // This Will Clear The Background Color To Black
    gl.ClearColor(0.0, 0.0, 0.0, 0.0);
    gl.ClearDepth(1.0);			// Enables Clearing Of The Depth Buffer
    gl.DepthFunc(gl.LESS);		// The Type Of Depth Test To Do
    gl.Enable(gl.DEPTH_TEST);		// Enables Depth Testing
    gl.ShadeModel(gl.SMOOTH);		// Enables Smooth Color Shading
    // Set Perspective Calculations To Most Accurate
    gl.Hint(gl.PERSPECTIVE_CORRECTION_HINT, gl.NICEST);
    ReSizeGLScene();
}


/* The main drawing function. */
void DrawGLScene() {
    // Clear The Screen And The Depth Buffer
    gl.Clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    gl.LoadIdentity();				// Reset The View

    time = sdl.GetTicks();
    uint32_t milliseconds = time - timeprev;
    timeprev = time;

    // dt Is The Time Interval (As Seconds) From The Previous Frame To
    // The Current Frame.
    // dt Will Be Used To Iterate Simulation Values Such As Velocity And
    // Position Of Masses.

    // Let's Convert Milliseconds To Seconds
    float64_t dt = milliseconds / 1000.0;

    // Divide dt By slowMotionRatio And Obtain The New dt
    dt /= slowMotionRatio;

    timeElapsed += dt;				// Iterate Elapsed Time

    // Say That The Maximum Possible dt Is 0.1 Seconds
    float64_t maxPossible_dt = 0.1;

    // This Is Needed So We Do Not Pass Over A Non Precise dt Value
    // Calculate Number Of Iterations To Be Made At This Update Depending On maxPossible_dt And dt
    int32_t numOfIterations = (dt / maxPossible_dt) + 1;
    if (numOfIterations)
	// dt Should Be Updated According To numOfIterations
	dt = dt / numOfIterations;

    int32_t	a;
    // We Need To Iterate Simulations "numOfIterations" Times
    for (a = 0; a < numOfIterations; ++a) {
	// Iterate constantVelocity Simulation By dt Seconds
	constantVelocity.operate(dt);
	// Iterate motionUnderGravitation Simulation By dt Seconds
	motionUnderGravitation.operate(dt);
	// Iterate massConnectedWithSpring Simulation By dt Seconds
	massConnectedWithSpring.operate(dt);
    }

    // Position Camera 40 Meters Up In Z-Direction.
    // Set The Up Vector In Y-Direction So That +X Directs To
    // Right And +Y Directs To Up On The Window.
    glu.LookAt(0, 0, 40, 0, 0, 0, 0, 1, 0);

    // Clear Screen And Depth Buffer
    gl.Clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

    // Drawing The Coordinate Plane Starts Here.
    // We Will Draw Horizontal And Vertical Lines With A Space Of 1
    // Meter Between Them.

    gl.Color3(0, 0, 1);			// Draw In Blue
    gl.Begin(gl.LINES);
    {
	float64_t	x, y;
	// Draw The Vertical Lines
	// x += 1.0 Stands For 1 Meter Of Space In This Example
	for (x = -20; x <= 20; x += 1.0) {
	    gl.Vertex3(x,  20, 0);
	    gl.Vertex3(x, -20, 0);
	}

	// Draw The Horizontal Lines
	// y += 1.0 Stands For 1 Meter Of Space In This Example
	for (y = -20; y <= 20; y += 1.0) {
	    gl.Vertex3( 20, y, 0);
	    gl.Vertex3(-20, y, 0);
	}
    }
    gl.End();
    // Drawing The Coordinate Plane Ends Here.

    // Draw All Masses In constantVelocity Simulation
    // (Actually There Is Only One Mass In This Example Of Code)
    gl.Color3(1, 0, 0);		// Draw In Red
    Mass mass;
    Vector3D pos;
    for (a = 0; a < sizeof(constantVelocity.masses); ++a) {
	mass = constantVelocity.masses[a];
	pos = mass.pos;

	text(pos.x, pos.y + 1, "Mass with constant vel");

	gl.PointSize(4);
	gl.Begin(gl.POINTS);
	{
	    gl.Vertex3(pos.x, pos.y, pos.z);
	}
	gl.End();
    }
    // Drawing Masses In constantVelocity Simulation Ends Here.

    // Draw All Masses In motionUnderGravitation Simulation
    // (Actually There Is Only One Mass In This Example Of Code)
    gl.Color3(1, 1, 0);			// Draw In Yellow
    for (a = 0; a < sizeof(motionUnderGravitation.masses); ++a) {
	mass = motionUnderGravitation.masses[a];
	pos = mass.pos;

	text(pos.x, pos.y + 1, "Motion under gravitation");

	gl.PointSize(4);
	gl.Begin(gl.POINTS);
	{
	    gl.Vertex3(pos.x, pos.y, pos.z);
	}
	gl.End();
    }
    // Drawing Masses In motionUnderGravitation Simulation Ends Here.

    // Draw All Masses In massConnectedWithSpring Simulation
    // (Actually There Is Only One Mass In This Example Of Code)
    gl.Color3(0, 1, 0);			// Draw In Green
    for (a = 0; a < sizeof(massConnectedWithSpring.masses); ++a) {
	mass = massConnectedWithSpring.masses[a];
	pos = mass.pos;

	text(pos.x, pos.y + 1, "Mass connected with spring");

	gl.PointSize(8);
	gl.Begin(gl.POINTS); {
	    gl.Vertex3(pos.x, pos.y, pos.z);
	}
	gl.End();

	// Draw A Line From The Mass Position To Connection Position
	// To Represent The Spring
	gl.Begin(gl.LINES);
	{
	    gl.Vertex3(pos.x, pos.y, pos.z);
	    pos = massConnectedWithSpring.connectionPos;
	    gl.Vertex3(pos.x, pos.y, pos.z);
	}
	gl.End();
    }
    // Drawing Masses In massConnectedWithSpring Simulation Ends Here.


    gl.Color3(1, 1, 1);			// Draw In White

    printf(s, "Time elapsed (seconds): %.2f", timeElapsed);
    text(-5.0, 14, s);	// Print timeElapsed

    printf(s, "Slow motion ratio: %.2f", slowMotionRatio);
    text(-5.0, 13, s);	// Print slowMotionRatio

    text(-5.0, 12, "Press F2 for normal motion");
    text(-5.0, 11, "Press F3 for slow motion");

    gl.Flush();	// Flush The GL Rendering Pipeline

    // swap buffers to display, since we're double buffered.
    sdl.gl.SwapWindow(win);
}

void loop() {
    uint8_t done = false;
    sdl.event_t	ev = new sdl.event_t;
    while (!done) {
	if (sdl.PollEvent(ev)) {
	    switch (ev.type) {
		case sdl.WINDOWEVENT:
		    switch (ev.event) {
			case sdl.WINDOWEVENT_RESIZED:
			    ReSizeGLScene();
			    break;
			default:
			    break;
		    }
		    break;
		case sdl.KEYDOWN:
		    switch (ev.keysym) {
			case sdl.K_ESCAPE:
			    done = true;
			    break;
			case sdl.K_F2:
			    slowMotionRatio = 1.0;
			    break;
			case sdl.K_F3:
			    slowMotionRatio = 10.0;
			    break;
			default:
			    break;
		    }
			break;
		case sdl.QUIT:
		    done = true;
		    break;
	    }
	}
	DrawGLScene();
    }
}
    

void main() {
    if (sdl.Init()) {
	print("init error: %s\n", sdl.GetError());
	exit(1);
    }
    sdl.gl.SetAttribute(sdl.gl.DOUBLE_BUFFER, 1);
    sdl.gl.SetAttribute(sdl.gl.DEPTH_SIZE, 24);
    win = sdl.CreateWindow("lesson39",
			   sdl.WINDOWPOS_CENTERED,
			   sdl.WINDOWPOS_CENTERED,
			   640, 480,
			   sdl.WINDOW_OPENGL |
			   sdl.WINDOW_RESIZABLE |
			   sdl.WINDOW_SHOWN);
    if (win == null) {
	print("create_window error: %s\n", sdl.GetError());
	exit(1);
    }
    ctx = sdl.gl.CreateContext(win);
    if (ctx == null) {
	print("create_context error: %s\n", sdl.GetError());
	exit(1);
    }
    sdl.gl.SetSwapInterval(1);
    sdl.gl.MakeCurrent(win, ctx);

    print("\
Esc: 		Exit\n\
F2:		Faster simulation\n\
F3:		Normal speed simulation\n");
    InitGL();
    BuildFont();
    loop();

    sdl.gl.DeleteContext(ctx);
    sdl.DestroyWindow(win);
    sdl.Quit();
}
main();
