/* Number of textures to load */
#define NUM_TEXTURES	5

float64_t xrot;		/* X Rotation		*/
float64_t yrot;		/* Y Rotation		*/
float64_t zrot;		/* Z Rotation		*/
float64_t roll;		/* Rolling texture	*/

/* Storage For Textures */
uint32_t texture[NUM_TEXTURES] = {};

uint8_t masking = true;		/* Masking toggle	*/
uint8_t scene   = false;	/* Scene toggle		*/

int32_t loop;			/* Generic loop variable	*/

sdl.window_t win;
sdl.gl.context_t ctx;
void init_all() {
    if (sdl.Init()) {
	print("init error: %s\n", sdl.GetError());
	exit(1);
    }
    sdl.gl.SetAttribute(sdl.gl.DOUBLE_BUFFER, 1);
    sdl.gl.SetAttribute(sdl.gl.DEPTH_SIZE, 24);
    win = sdl.CreateWindow("lesson20",
			   sdl.WINDOWPOS_CENTERED,
			   sdl.WINDOWPOS_CENTERED,
			   640, 480,
			   sdl.WINDOW_OPENGL |
			   sdl.WINDOW_RESIZABLE |
			   sdl.WINDOW_SHOWN);
    if (win == null) {
	print("create_window error: %s\n", sdl.GetError());
	exit(1);
    }
    ctx = sdl.gl.CreateContext(win);
    if (ctx == null) {
	print("create_context error: %s\n", sdl.GetError());
	exit(1);
    }
    sdl.gl.SetSwapInterval(1);
    sdl.gl.MakeCurrent(win, ctx);
}

void init_texture() {
    sdl.surface_t srf[5] = {};

    if ((srf[0] = sdl.LoadSurface("nehe/lesson20/logo.bmp")) &&
	(srf[1] = sdl.LoadSurface("nehe/lesson20/mask1.bmp")) &&
	(srf[2] = sdl.LoadSurface("nehe/lesson20/image1.bmp")) &&
	(srf[3] = sdl.LoadSurface("nehe/lesson20/mask2.bmp")) &&
	(srf[4] = sdl.LoadSurface("nehe/lesson20/image2.bmp"))) {

	/* Create The Texture */
	gl.GenTextures(texture);

	for (loop = 0; loop < 5; ++loop) {
	    /* Typical Texture Generation Using Data From The Bitmap */
	    gl.BindTexture(gl.TEXTURE_2D, texture[loop]);

	    /* Generate The Texture */
	    sdl.gl.TexImage2D(srf[loop]);

	    /* Linear Filtering */
	    gl.TexParameter(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
	    gl.TexParameter(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
	}
    }

    /* Free up any memory we may have used */
    for (loop = 0; loop < 5; ++loop)
	if (srf[loop])
	    sdl.FreeSurface(srf[loop]);
}

void resize() {
    float64_t		ratio = win.w / win.h;

    /* Setup our viewport. */
    gl.Viewport(0, 0, win.w, win.h);

    /* change to the projection matrix and set our viewing volume. */
    gl.MatrixMode(gl.PROJECTION);
    gl.LoadIdentity();

    glu.Perspective(45.0, ratio, 0.1, 100.0);

    /* Make sure we're chaning the model view and not the projection */
    gl.MatrixMode(gl.MODELVIEW);

    /* Reset The View */
    gl.LoadIdentity();
}

void init() {
    init_texture();

    /* Set the background black */
    gl.ClearColor(0.0, 0.0, 0.0, 0.5);

    /* Depth buffer setup */
    gl.ClearDepth(1.0);

    /* Enables Depth Testing */
    gl.Enable(gl.DEPTH_TEST);

    /* Enables Smooth Color Shading */
    gl.ShadeModel(gl.SMOOTH);

    /* Enable 2D Texture Mapping */
    gl.Enable(gl.TEXTURE_2D);
}

void draw() {
    /* Clear The Screen And The Depth Buffer */
    gl.Clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

    /* Move Into The Screen 5 Units */
    gl.LoadIdentity();
    gl.Translate(0.0, 0.0, -2.0);

    /* Select Our Logo Texture */
    gl.BindTexture(gl.TEXTURE_2D, texture[0]);
    gl.Begin(gl.QUADS);		/* Start Drawing A Textured Quad */
    {
	gl.TexCoord2(0.0, -roll + 3.0);	gl.Vertex3(-1.1, -1.1,  0.0);
	gl.TexCoord2(3.0, -roll + 3.0);	gl.Vertex3( 1.1, -1.1,  0.0);
	gl.TexCoord2(3.0, -roll + 0.0);	gl.Vertex3( 1.1,  1.1,  0.0);
	gl.TexCoord2(0.0, -roll + 0.0);	gl.Vertex3(-1.1,  1.1,  0.0);
    }
    gl.End();

    /* Enable Blending */
    gl.Enable(gl.BLEND);
    /* Disable Depth Testing */
    gl.Disable(gl.DEPTH_TEST);

    /* Is masking enables */
    if (masking)
	gl.BlendFunc(gl.DST_COLOR, gl.ZERO);

    /* Draw the second scene? */
    if (scene) {
	/* Translate Into The Screen One Unit */
	gl.Translate(0.0, 0.0, -1.0);
	/* Rotate On The Z Axis 360 Degrees */
	gl.Rotate(roll * 360, 0.0, 0.0, 1.0);

	if (masking) {
	    /* Select The Second Mask Texture */
	    gl.BindTexture(gl.TEXTURE_2D, texture[3]);
	    /* Start Drawing A Textured Quad */
	    gl.Begin(gl.QUADS);
	    {
		gl.TexCoord2(0.0, 1.0);
		gl.Vertex3(-1.1, -1.1,  0.0);
		gl.TexCoord2(1.0, 1.0);
		gl.Vertex3( 1.1, -1.1,  0.0);
		gl.TexCoord2(1.0, 0.0);
		gl.Vertex3( 1.1,  1.1,  0.0);
		gl.TexCoord2(0.0, 0.0);
		gl.Vertex3(-1.1,  1.1,  0.0);
	    }
	    gl.End();
	}

	/* Copy Image 2 Color To The Screen */
	gl.BlendFunc(gl.ONE, gl.ONE);
	/* Select The Second Image Texture */
	gl.BindTexture(gl.TEXTURE_2D, texture[4]);
	/* Start Drawing A Textured Quad */
	gl.Begin(gl.QUADS);
	{
	    gl.TexCoord2(0.0,  1.0);
	    gl.Vertex3( -1.1, -1.1, 0.0);
	    gl.TexCoord2(1.0,  1.0 );
	    gl.Vertex3(  1.1, -1.1, 0.0);
	    gl.TexCoord2(1.0,  0.0 );
	    gl.Vertex3(  1.1,  1.1, 0.0);
	    gl.TexCoord2(0.0,  0.0 );
	    gl.Vertex3( -1.1,  1.1, 0.0);
	}
	gl.End();
    }
    else {
	if (masking) {
	    /* Select The First Mask Texture */
	    gl.BindTexture(gl.TEXTURE_2D, texture[1]);
	    /* Start Drawing A Textured Quad */
	    gl.Begin(gl.QUADS);
	    {
		gl.TexCoord2( roll + 0.0, 4.0);
		gl.Vertex3(-1.1, -1.1, 0.0);
		gl.TexCoord2( roll + 4.0, 4.0);
		gl.Vertex3( 1.1, -1.1, 0.0);
		gl.TexCoord2( roll + 4.0, 0.0);
		gl.Vertex3( 1.1, 1.1, 0.0);
		gl.TexCoord2( roll + 0.0, 0.0);
		gl.Vertex3(-1.1, 1.1, 0.0);
	    }
	    gl.End();
	}

	/* Copy Image 1 Color To The Screen */
	gl.BlendFunc(gl.ONE, gl.ONE);
	/* Select The First Image Texture */
	gl.BindTexture(gl.TEXTURE_2D, texture[2]);
	/* Start Drawing A Textured Quad */
	gl.Begin(gl.QUADS);
	{
	    gl.TexCoord2( roll + 0.0, 4.0);
	    gl.Vertex3(-1.1, -1.1, 0.0);
	    gl.TexCoord2( roll + 4.0, 4.0);
	    gl.Vertex3( 1.1, -1.1, 0.0);
	    gl.TexCoord2( roll + 4.0, 0.0);
	    gl.Vertex3( 1.1, 1.1, 0.0);
	    gl.TexCoord2( roll + 0.0, 0.0);
	    gl.Vertex3(-1.1, 1.1, 0.0);
	}
	gl.End();
    }

    gl.Enable(gl.DEPTH_TEST);	/* Enable Depth Testing */
    gl.Disable(gl.BLEND);	/* Disable Blending     */

    roll += 0.002;		/* Increase Our Texture Roll Variable */
    if (roll > 1.0)
	roll -= 1.0;

    /* Draw it to the screen */
    sdl.gl.SwapWindow(win);

    xrot += 0.3;	/* X Axis Rotation */
    yrot += 0.2;	/* Y Axis Rotation */
    zrot += 0.4;	/* Z Axis Rotation */
}

void event_loop() {
    uint8_t done = false;
    sdl.event_t	ev = new sdl.event_t;
    while (!done) {
	if (sdl.PollEvent(ev)) {
	    switch (ev.type) {
		case sdl.WINDOWEVENT:
		    switch (ev.event) {
			case sdl.WINDOWEVENT_RESIZED:
			    resize();
			    break;
			default:
			    break;
		    }
		    break;
		case sdl.KEYDOWN:
		    switch (ev.keysym) {
			case sdl.K_ESCAPE:
			    done = true;
			    break;
			case sdl.K_m:
			    /* 'm' key was pressed
			     * toggles masking
			     */
			    masking = !masking;
			    break;
			case sdl.K_SPACE:
			    /* Spacebar key was pressed
			     * toggles the scene to display
			     */
			    scene = !scene;
			    break;
			default:
			    break;
		    }
		    break;
		case sdl.QUIT:
		    done = true;
		    break;
	    }
	}
	draw();
    }
}
    
void finish_all() {
    gl.DeleteTextures(texture);
    sdl.gl.DeleteContext(ctx);
    sdl.DestroyWindow(win);
    sdl.Quit();
}

print("\
Esc:		Exit\n\
m:		Toggle masking\n\
Space:		Toggle display\n");
init_all();
init();
resize();
event_loop();
finish_all();
