

float64_t xrot;		/* X Rotation */
float64_t yrot;		/* Y Rotation */
float64_t zrot;		/* Z Rotation */

/* The Points On The Grid Of Our "Wave" */
float64_t points[45][45][3];
/* Counter Used To Control How Fast Flag Waves */
int32_t wiggle_count = 0;
float64_t hold;			/* Temporarily Holds A Floating Point Value */

uint32_t texture[1] = {};	/* Storage for 3 textures */

sdl.window_t win;
sdl.gl.context_t ctx;
void init_all() {
    if (sdl.init()) {
	print("init error: %s\n", sdl.get_error());
	exit(1);
    }
    sdl.gl.set_attribute(sdl.gl.DoubleBuffer, 1);
    sdl.gl.set_attribute(sdl.gl.DepthSize, 24);
    win = sdl.create_window("lesson11",
			    sdl.WindowposCentered,
			    sdl.WindowposCentered,
			    640, 480,
			    sdl.WindowOpenGL |
			    sdl.WindowResizable |
			    sdl.WindowShown);
    if (win == null) {
	print("create_window error: %s\n", sdl.get_error());
	exit(1);
    }
    ctx = sdl.gl.create_context(win);
    if (ctx == null) {
	print("create_context error: %s\n", sdl.get_error());
	exit(1);
    }
    sdl.gl.set_swap_interval(1);
    sdl.gl.make_current(win, ctx);
}

void init_texture() {
    sdl.surface_t srf;
    srf = sdl.load_surface("nehe/lesson11/tim.bmp");
    if (srf != null) {
	/* Create The Texture */
	gl.GenTextures(texture);

	/* Load in texture 1 */
	/* Typical Texture Generation Using Data From The Bitmap */
	gl.BindTexture(gl.TEXTURE_2D, texture[0]);

	/* Generate The Texture */
	sdl.gl.TexImage2D(srf);

	/* Linear Filtering */
	gl.TexParameter(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER,
			gl.LINEAR);
	gl.TexParameter(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER,
			gl.LINEAR);

	sdl.free_surface(srf);
    }
}

void resize() {
    float64_t		ratio = win.w / win.h;

    /* Setup our viewport. */
    gl.Viewport(0, 0, win.w, win.h);

    /* change to the projection matrix and set our viewing volume. */
    gl.MatrixMode(gl.PROJECTION);
    gl.LoadIdentity();

    glu.Perspective(45.0, ratio, 0.1, 100.0);

    /* Make sure we're chaning the model view and not the projection */
    gl.MatrixMode(gl.MODELVIEW);

    /* Reset The View */
    gl.LoadIdentity();
}

void init() {
    int32_t	x, y;

    init_texture();

    /* Enable Texture Mapping */
    gl.Enable(gl.TEXTURE_2D);

    /* Enable smooth shading */
    gl.ShadeModel(gl.SMOOTH);

    /* Set the background black */
    gl.ClearColor(0.0, 0.0, 0.0, 0.5);

    /* Depth buffer setup */
    gl.ClearDepth(1.0);

    /* Enables Depth Testing */
    gl.Enable(gl.DEPTH_TEST);

    /* The Type Of Depth Test To Do */
    gl.DepthFunc(gl.LEQUAL);

    /* Really Nice Perspective Calculations */
    gl.Hint(gl.PERSPECTIVE_CORRECTION_HINT, gl.NICEST);

    /* Fill the back with the texture. The front will only be wireline */
    gl.PolygonMode(gl.BACK, gl.FILL);
    gl.PolygonMode(gl.FRONT, gl.LINE);

    points = {};
    /* Loop Through The X Plane */
    for (x = 0; x < 45; ++x) {
	points[x] = {};
	/* Loop Through The Y Plane */
	for (y = 0; y < 45; ++y) {
	    /* Apply The Wave To Our Mesh */
	    points[x][y] = {
		(x / 5.0) - 4.5,
		(y / 5.0) - 4.5,
		sin((((x / 5.0) * 40.0) / 360.0) * 3.141592654 * 2.0)
	    };
	}
    }
}

void draw() {
    /* Loop Variables */
    int32_t x, y;
    /* Used To Break The Flag Into Tiny Quads */
    float64_t f_x, f_y, f_xb, f_yb;
 
    /* Clear The Screen And Depth Buffer */
    gl.Clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

    /* Reset The Current Matrix */
    gl.LoadIdentity();

    /* Translate 17 Units Into The Screen */
    gl.Translate(0.0, 0.0, -12.0);

    gl.Rotate(xrot, 1.0, 0.0, 0.0);	/* Rotate On The X Axis */
    gl.Rotate(yrot, 0.0, 1.0, 0.0);	/* Rotate On The Y Axis */
    gl.Rotate(zrot, 0.0, 0.0, 1.0);	/* Rotate On The Z Axis */

    gl.BindTexture(gl.TEXTURE_2D, texture[0]);	/* Select Our Texture */

    /* Start Drawing Our Quads */
    gl.Begin(gl.QUADS);
    /* Loop Through The X Plane 0-44 (45 Points) */
    for (x = 0; x < 44; ++x) {
	/* Loop Through The Y Plane 0-44 (45 Points) */
	for (y = 0; y < 44; ++y) {
	    /* Create A Floating Point X Value */
	    f_x = x / 44.0;
	    /* Create A Floating Point Y Value */
	    f_y = y / 44.0;
	    /* Create A Floating Point Y Value+0.0227f */
	    f_xb = (x + 1) / 44.0;
	    /* Create A Floating Point Y Value+0.0227f */
	    f_yb = (y + 1) / 44.0;

	    /* First Texture Coordinate (Bottom Left) */
	    gl.TexCoord2(f_x, f_y);
	    gl.Vertex3(points[x][y][0], points[x][y][1], points[x][y][2]);

	    /* Second Texture Coordinate (Top Left) */
	    gl.TexCoord2(f_x, f_yb);
	    gl.Vertex3(points[x][y + 1][0], points[x][y + 1][1],
		       points[x][y + 1][2]);

	    /* Third Texture Coordinate (Top Right) */
	    gl.TexCoord2(f_xb, f_yb);
	    gl.Vertex3(points[x + 1][y + 1][0], points[x + 1][y + 1][1],
		       points[x + 1][y + 1][2]);

	    /* Fourth Texture Coordinate (Bottom Right) */
	    gl.TexCoord2(f_xb, f_y);
	    gl.Vertex3(points[x + 1][y][0], points[x + 1][y][1],
		       points[x + 1][y][2]);
	}
    }
    gl.End();

    /* Used To Slow Down The Wave (Every 2nd Frame Only) */
    if (wiggle_count == 2) {
	/* Loop Through The Y Plane */
	for (y = 0; y < 45; ++y) {
	    /* Store Current Value One Left Side Of Wave */
	    hold = points[0][y][2];
	    /* Loop Through The X Plane */
	    for (x = 0; x < 44; ++x) {
		/* Current Wave Value Equals Value To The Right */
		points[x][y][2] = points[x + 1][y][2];
	    }
	    /* Last Value Becomes The Far Left Stored Value */
	    points[44][y][2] = hold;
	}
	wiggle_count = 0; /* Set Counter Back To Zero */
    }
    ++wiggle_count;	/* Increase The Counter */

    xrot += 0.3;	/* Increase The X Rotation Variable */
    yrot += 0.2;	/* Increase The Y Rotation Variable */
    zrot += 0.4;	/* Increase The Z Rotation Variable */

    /* Draw it to the screen */
    sdl.gl.swap_window(win);
}

void events() {
    uint8_t done = false;
    sdl.event_t	ev = new sdl.event_t;
    while (!done) {
	if (sdl.poll_event(ev)) {
	    switch (ev.type) {
		case sdl.EventWindow:
		    switch (ev.event) {
			case sdl.WindowEventResized:
			    resize();
			    break;
			default:
			    break;
		    }
		    break;
		case sdl.EventKeyDown:
		    switch (ev.keysym) {
			case sdl.Key_Escape:
			    done = true;
			    break;
			default:
			    break;
		    }
		    break;
		case sdl.EventQuit:
		    done = true;
		    break;
	    }
	}
	draw();
    }
}
    
void finish_all() {
    sdl.gl.delete_context(ctx);
    sdl.destroy_window(win);
    sdl.quit();
}

print("\
Esc:		Exit\n");
init_all();
init();
resize();
events();
finish_all();
