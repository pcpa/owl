/* This is the mostly hacked example, because it is not using a
 * display list for every character, and using glBitmap for the
 * characters, but instead rendering using textures created from
 * actually writing text to a sdl surface.
 */

float64_t cnt1;	/* 1st Counter Used To Move Text & For Coloring */
float64_t cnt2;	/* 2nd Counter Used To Move Text & For Coloring */

sdl.window_t win;
sdl.font_t fnt;
sdl.gl.context_t ctx;
void init_all() {
    if (sdl.init()) {
	print("init error: %s\n", sdl.get_error());
	exit(1);
    }
    sdl.gl.set_attribute(sdl.gl.DoubleBuffer, 1);
    sdl.gl.set_attribute(sdl.gl.DepthSize, 24);
    win = sdl.create_window("lesson13",
			    sdl.WindowposCentered,
			    sdl.WindowposCentered,
			    640, 480,
			    sdl.WindowOpenGL |
			    sdl.WindowResizable |
			    sdl.WindowShown);
    if (win == null) {
	print("create_window error: %s\n", sdl.get_error());
	exit(1);
    }
    fnt = sdl.open_font("/usr/share/fonts/gnu-free/FreeSans.ttf", 18);
    if (fnt == null) {
	print("open_font error: %s\n", sdl.get_error());
	exit(1);
    }
    ctx = sdl.gl.create_context(win);
    if (ctx == null) {
	print("create_context error: %s\n", sdl.get_error());
	exit(1);
    }
    sdl.gl.set_swap_interval(1);
    sdl.gl.make_current(win, ctx);
}


void resize() {
    float64_t		ratio = win.w / win.h;

    /* Setup our viewport. */
    gl.Viewport(0, 0, win.w, win.h);

    /* change to the projection matrix and set our viewing volume. */
    gl.MatrixMode(gl.PROJECTION);
    gl.LoadIdentity();

    glu.Perspective(45.0, ratio, 0.1, 100.0);

    /* Make sure we're chaning the model view and not the projection */
    gl.MatrixMode(gl.MODELVIEW);

    /* Reset The View */
    gl.LoadIdentity();
}

void init() {
    /* Enable smooth shading */
    gl.ShadeModel(gl.SMOOTH);

    /* Set the background black */
    gl.ClearColor(0.0, 0.0, 0.0, 0.0);

    /* Depth buffer setup */
    gl.ClearDepth(1.0);

    /* Enables Depth Testing */
    gl.Enable(gl.DEPTH_TEST);

    /* The Type Of Depth Test To Do */
    gl.DepthFunc(gl.LEQUAL);

    /* Really Nice Perspective Calculations */
    gl.Hint(gl.PERSPECTIVE_CORRECTION_HINT, gl.NICEST);

    gl.Enable(gl.TEXTURE_2D);
    gl.Enable(gl.BLEND);

    gl.BlendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
}

string_t text = {};
uint32_t texture[1] = {};
void draw() {
    float64_t x, y, w, h, f;
    sdl.surface_t pix;
    /* Clear The Screen And The Depth Buffer */
    gl.Clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

    gl.LoadIdentity();

    /* Move into the screen 1 unit */
    gl.Translate(0.0, 0.0, -1.0);

    /* Pulsing Colors Based On Text Position */
    sdl.color_t col = {
	255 * cos(cnt1),
	255 * sin(cnt2),
	255 * 1.0 - 0.5 * cos(cnt1 + cnt2)
    };

    /* Print text to the screen */
    printf(text, "Active OpenGL Text With NeHe - %7.2f", cnt1);
    pix = sdl.render_text_blended(fnt, text, col);
    gl.GenTextures(texture);

    gl.BindTexture(gl.TEXTURE_2D, texture[0]);

    gl.TexParameter(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
    gl.TexParameter(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);

    sdl.gl.TexImage2D(pix);

    /* Position The Text On The Screen */
    x = -0.45 + 0.05 * cos(cnt1);
    y = 0.35 * sin(cnt2);
    f = 1.5 * (pix.w > pix.h ? pix.w : pix.h);
    w = pix.w / f;
    h = pix.h / f;

    /* Draw this texture on a quad with the given xyz coordinates.*/
    gl.Begin(gl.QUADS);
    {
	gl.TexCoord2(0, 0);	gl.Vertex3(x, y + h, 0);
	gl.TexCoord2(1, 0);	gl.Vertex3(x + w, y + h, 0);
	gl.TexCoord2(1, 1);	gl.Vertex3(x + w, y, 0);
	gl.TexCoord2(0, 1);	gl.Vertex3(x, y, 0);
    }
    gl.End();

    /* Clean up. */
    gl.DeleteTextures(texture);

    sdl.free_surface(pix);

    cnt1 += 0.051; /* Increase the first counter */
    cnt2 += 0.005; /* Increase the second counter */

    /* Draw it to the screen */
    sdl.gl.swap_window(win);
}

void events() {
    uint8_t done = false;
    sdl.event_t	ev = new sdl.event_t;
    while (!done) {
	if (sdl.poll_event(ev)) {
	    switch (ev.type) {
		case sdl.EventWindow:
		    switch (ev.event) {
			case sdl.WindowEventResized:
			    resize();
			    break;
			default:
			    break;
		    }
		    break;
		case sdl.EventKeyDown:
		    switch (ev.keysym) {
			case sdl.Key_Escape:
			    done = true;
			    break;
			default:
			    break;
		    }
		    break;
		case sdl.EventQuit:
		    done = true;
		    break;
	    }
	}
	draw();
    }
}
    
void finish_all() {
    sdl.close_font(fnt);
    sdl.gl.delete_context(ctx);
    sdl.destroy_window(win);
    sdl.quit();
}

print("\
Esc:		Exit\n");
init_all();
init();
resize();
events();
finish_all();
