/* Number of textures to load */
#define NUM_TEXTURES	6

uint8_t light;

float64_t xrot;		/* X Rotation */
float64_t yrot;		/* Y Rotation */
float64_t xspeed;	/* X Rotation Speed */
float64_t yspeed;	/* Y Rotation Speed */
float64_t z = -5.0;	 /* Depth Into The Screen */

/* Ambient Light Values */
float32_t LightAmbient[]  = { 0.5, 0.5, 0.5, 1.0 };
/* Diffuse Light Values */
float32_t LightDiffuse[]  = { 1.0, 1.0, 1.0, 1.0 };
/* Light Position */
float32_t LightPosition[] = { 0.0, 0.0, 2.0, 1.0 };

glu.quadric_t quadratic;
uint32_t object = 3;	/* Which object to draw */
uint32_t filter;

uint32_t texture[NUM_TEXTURES] = {};

sdl.window_t win;
sdl.gl.context_t ctx;
void init_all() {
    if (sdl.Init()) {
	print("init error: %s\n", sdl.GetError());
	exit(1);
    }
    sdl.gl.SetAttribute(sdl.gl.DOUBLE_BUFFER, 1);
    sdl.gl.SetAttribute(sdl.gl.DEPTH_SIZE, 24);
    win = sdl.CreateWindow("lesson23",
			   sdl.WINDOWPOS_CENTERED,
			   sdl.WINDOWPOS_CENTERED,
			   640, 480,
			   sdl.WINDOW_OPENGL |
			   sdl.WINDOW_RESIZABLE |
			   sdl.WINDOW_SHOWN);
    if (win == null) {
	print("create_window error: %s\n", sdl.GetError());
	exit(1);
    }
    ctx = sdl.gl.CreateContext(win);
    if (ctx == null) {
	print("create_context error: %s\n", sdl.GetError());
	exit(1);
    }
    sdl.gl.SetSwapInterval(1);
    sdl.gl.MakeCurrent(win, ctx);
}

void init_texture() {
    sdl.surface_t srf[2] = {};
    int32_t loop;

    /* Load The Bitmap, Check For Errors, If Bitmap's Not Found Quit */
    if ((srf[0] = sdl.LoadSurface("nehe/lesson23/bg.bmp")) &&
	(srf[1] = sdl.LoadSurface("nehe/lesson23/reflect.bmp"))) {

        /* Create The Texture */
	gl.GenTextures(texture);
	for (loop = 0; loop <= 1; ++loop) {
	    /* Create Nearest Filtered Texture */
	    gl.BindTexture(gl.TEXTURE_2D, texture[loop]); /* Gen Tex 0 And 1 */
	    gl.TexParameter(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
	    gl.TexParameter(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );
	    sdl.gl.TexImage2D(srf[loop]);

            /* Create Linear Filtered Texture */
            gl.BindTexture(gl.TEXTURE_2D, texture[loop + 2]); /* Gen Tex 2 And 3 */
	    gl.TexParameter(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
	    gl.TexParameter(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
	    sdl.gl.TexImage2D(srf[loop]);

            /* Create MipMapped Texture */
            gl.BindTexture(gl.TEXTURE_2D, texture[loop + 4]); /* Gen Tex 4 and 5 */
            gl.TexParameter(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
	    gl.TexParameter(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER,
			    gl.LINEAR_MIPMAP_NEAREST);
	    sdl.PullSurface(srf[loop]);
	    glu.Build2DMipmaps(gl.TEXTURE_2D, srf[loop].w, srf[loop].h,
			       gl.BGR, srf[loop].pixels);
	}

	/* Free up any memory we may have used */
	for (loop = 0; loop <= 1; ++loop)
	    sdl.FreeSurface(srf[loop]);
    }
}

void resize() {
    float64_t		ratio = win.w / win.h;

    /* Setup our viewport. */
    gl.Viewport(0, 0, win.w, win.h);

    /* change to the projection matrix and set our viewing volume. */
    gl.MatrixMode(gl.PROJECTION);
    gl.LoadIdentity();

    glu.Perspective(45.0, ratio, 0.1, 100.0);

    /* Make sure we're chaning the model view and not the projection */
    gl.MatrixMode(gl.MODELVIEW);

    /* Reset The View */
    gl.LoadIdentity();
}

void init() {
    init_texture();

    /* Enable Texture Mapping */
    gl.Enable(gl.TEXTURE_2D);

    /* Enable smooth shading */
    gl.ShadeModel(gl.SMOOTH);

    /* Set the background black */
    gl.ClearColor(0.0, 0.0, 0.0, 0.0);

    /* Depth buffer setup */
    gl.ClearDepth(1.0);

    /* Enables Depth Testing */
    gl.Enable(gl.DEPTH_TEST);

    /* The Type Of Depth Test To Do */
    gl.DepthFunc(gl.LEQUAL);

    /* Really Nice Perspective Calculations */
    gl.Hint(gl.PERSPECTIVE_CORRECTION_HINT, gl.NICEST);

    /* Setup The Ambient Light */
    gl.Lightv(gl.LIGHT1, gl.AMBIENT, LightAmbient);

    /* Setup The Diffuse Light */
    gl.Lightv(gl.LIGHT1, gl.DIFFUSE, LightDiffuse);

    /* Position The Light */
    gl.Lightv(gl.LIGHT1, gl.POSITION, LightPosition);

    /* Enable Light One */
    gl.Enable(gl.LIGHT1);

    /* Set The Texture Generation Mode For S To Sphere Mapping */
    gl.TexGen(gl.S, gl.TEXTURE_GEN_MODE, gl.SPHERE_MAP);
    /* Set The Texture Generation Mode For T To Sphere Mapping */
    gl.TexGen(gl.T, gl.TEXTURE_GEN_MODE, gl.SPHERE_MAP);

    /* Create A Pointer To The Quadric Object */
    quadratic = glu.NewQuadric();
    /* Create Smooth Normals */
    glu.QuadricNormals(quadratic, glu.SMOOTH);
    /* Create Texture Coords */
    glu.QuadricTexture(quadratic, true);
}

void cube() {
    gl.Begin(gl.QUADS);
    {
      /* Front Face */
      gl.Normal3(0.0, 0.0, 1.0);
      gl.TexCoord2(1.0, 0.0); gl.Vertex3(-1.0, -1.0,  1.0);
      gl.TexCoord2(0.0, 0.0); gl.Vertex3( 1.0, -1.0,  1.0);
      gl.TexCoord2(0.0, 1.0); gl.Vertex3( 1.0,  1.0,  1.0);
      gl.TexCoord2(1.0, 1.0); gl.Vertex3(-1.0,  1.0,  1.0);

      /* Back Face */
      gl.Normal3(0.0, 0.0, -1.0);
      gl.TexCoord2(0.0, 0.0); gl.Vertex3(-1.0, -1.0, -1.0);
      gl.TexCoord2(0.0, 1.0); gl.Vertex3(-1.0,  1.0, -1.0);
      gl.TexCoord2(1.0, 1.0); gl.Vertex3( 1.0,  1.0, -1.0);
      gl.TexCoord2(1.0, 0.0); gl.Vertex3( 1.0, -1.0, -1.0);

      /* Top Face */
      gl.Normal3( 0.0, 1.0, 0.0);
      gl.TexCoord2(1.0, 1.0); gl.Vertex3(-1.0,  1.0, -1.0);
      gl.TexCoord2(1.0, 0.0); gl.Vertex3(-1.0,  1.0,  1.0);
      gl.TexCoord2(0.0, 0.0); gl.Vertex3( 1.0,  1.0,  1.0);
      gl.TexCoord2(0.0, 1.0); gl.Vertex3( 1.0,  1.0, -1.0);

      /* Bottom Face */
      gl.Normal3(0.0, -1.0, 0.0);
      gl.TexCoord2(0.0, 1.0); gl.Vertex3(-1.0, -1.0, -1.0);
      gl.TexCoord2(1.0, 1.0); gl.Vertex3( 1.0, -1.0, -1.0);
      gl.TexCoord2(1.0, 0.0); gl.Vertex3( 1.0, -1.0,  1.0);
      gl.TexCoord2(0.0, 0.0); gl.Vertex3(-1.0, -1.0,  1.0);

      /* Right face */
      gl.Normal3(1.0, 0.0, 0.0);
      gl.TexCoord2(0.0, 0.0); gl.Vertex3(1.0, -1.0, -1.0);
      gl.TexCoord2(0.0, 1.0); gl.Vertex3(1.0,  1.0, -1.0);
      gl.TexCoord2(1.0, 1.0); gl.Vertex3(1.0,  1.0,  1.0);
      gl.TexCoord2(1.0, 0.0); gl.Vertex3(1.0, -1.0,  1.0);

      /* Left Face*/
      gl.Normal3(-1.0, 0.0, 0.0);
      gl.TexCoord2(1.0, 0.0); gl.Vertex3(-1.0, -1.0, -1.0);
      gl.TexCoord2(0.0, 0.0); gl.Vertex3(-1.0, -1.0,  1.0);
      gl.TexCoord2(0.0, 1.0); gl.Vertex3(-1.0,  1.0,  1.0);
      gl.TexCoord2(1.0, 1.0); gl.Vertex3(-1.0,  1.0, -1.0);
    }
    gl.End();
}

void draw() {
    /* Clear The Screen And The Depth Buffer */
    gl.Clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

    /* Reset the view */
    gl.LoadIdentity();

    /* Translate Into/Out Of The Screen By z */
    gl.Translate(0.0, 0.0, z);

    /* Enable Texture Coord Generation For S */
    gl.Enable(gl.TEXTURE_GEN_S);
    /* Enable Texture Coord Generation For T */
    gl.Enable(gl.TEXTURE_GEN_T);

    /* Select A Texture Based On filter */
    gl.BindTexture(gl.TEXTURE_2D, texture[filter * 2 + 1]);

    gl.PushMatrix();

    gl.Rotate(xrot, 1.0, 0.0, 0.0);	/* Rotate On The X Axis By xrot */
    gl.Rotate(yrot, 0.0, 1.0, 0.0);	/* Rotate On The Y Axis By yrot */

    switch (object) {
	case 0:
	    cube();
	    break;
	case 1:
	    gl.Translate(0.0, 0.0, -1.5);
	    glu.Cylinder(quadratic, 1.0, 1.0, 3.0, 32, 32);
	    break;
	case 2:
	    glu.Sphere(quadratic, 1.3, 32, 32);
	    break;
	case 3:
	    gl.Translate(0.0, 0.0, -1.5);
	    glu.Cylinder(quadratic, 1.0, 0.2, 3.0, 32, 32);
	    break;
    }

   gl.PopMatrix();

    /* Disable Texture Coord Generation For S */
    gl.Disable(gl.TEXTURE_GEN_S);
    /* Disable Texture Coord Generation For T */
    gl.Disable(gl.TEXTURE_GEN_T);

    /* This Will Select The BG Texture */
    gl.BindTexture(gl.TEXTURE_2D, texture[filter * 2]);
    gl.PushMatrix();
    gl.Translate(0.0, 0.0, -29.0);
    gl.Begin(gl.QUADS);
    {
	gl.Normal3(0.0, 0.0, 1.0);
	gl.TexCoord2(0.0, 0.0);	gl.Vertex3(-13.3, -10.0,  10.0);
	gl.TexCoord2(1.0, 0.0);	gl.Vertex3( 13.3, -10.0,  10.0);
	gl.TexCoord2(1.0, 1.0);	gl.Vertex3( 13.3,  10.0,  10.0);
	gl.TexCoord2(0.0, 1.0);	gl.Vertex3(-13.3,  10.0,  10.0);
    }
    gl.End();
    gl.PopMatrix();

    /* Draw it to the screen */
    sdl.gl.SwapWindow(win);

    xrot += xspeed;	/* Add xspeed To xrot */
    yrot += yspeed;	/* Add yspeed To yrot */
}

void loop() {
    uint8_t done = false;
    sdl.event_t	ev = new sdl.event_t;
    while (!done) {
	if (sdl.PollEvent(ev)) {
	    switch (ev.type) {
		case sdl.WINDOWEVENT:
		    switch (ev.event) {
			case sdl.WINDOWEVENT_RESIZED:
			    resize();
			    break;
			default:
			    break;
		    }
		    break;
		case sdl.KEYDOWN:
		    switch (ev.keysym) {
			case sdl.K_ESCAPE:
			    done = true;
			    break;
			case sdl.K_f:
			    /* 'f' key was pressed
			     * this pages through the different filters
			     */
			    filter = (++filter) % 3;
			    break;
			case sdl.K_l:
			    /* 'l' key was pressed
			     * this toggles the light
			     */
			    light = !light;
			    if (!light)
				gl.Disable(gl.LIGHTING);
			    else
				gl.Enable(gl.LIGHTING);
			    break;
			case sdl.K_SPACE:
			    /* Spacebar was pressed
			     * this pages through the objects
			     */
			    object = (object + 1) % 4;
			    break;
			case sdl.K_PAGEUP:
			    /* PageUp key was pressed
			     * this zooms into the scene
			     */
			    z -= 0.02;
			    break;
			case sdl.K_PAGEDOWN:
			    /* PageDown key was pressed
			     * this zooms out of the scene
			     */
			    z += 0.02;
			    break;
			case sdl.K_UP:
			    /* Up arrow key was pressed
			     * this affects the x rotation
			     */
			    xspeed -= 0.01;
			    break;
			case sdl.K_DOWN:
			    /* Down arrow key was pressed
			     * this affects the x rotation
			     */
			    xspeed += 0.01;
			    break;
			case sdl.K_RIGHT:
			    /* Right arrow key was pressed
			     * this affects the y rotation
			     */
			    yspeed += 0.01;
			    break;
			case sdl.K_LEFT:
			    /* Left arrow key was pressed
			     * this affects the y rotation
			     */
			    yspeed -= 0.01;
			    break;
			default:
			    break;
		    }
		    break;
		case sdl.QUIT:
		    done = true;
		    break;
	    }
	}
	draw();
    }
}
    
void finish_all() {
    sdl.gl.DeleteContext(ctx);
    sdl.DestroyWindow(win);
    sdl.Quit();
}

print("\
Esc:		Exit\n\
f:		Change filter\n\
l:		Toggle light\n\
Space:		Change object\n\
PageUp:		Zoom out\n\
PageDown:	Zoom in\n\
Up:		Rotate up\n\
Down:		Rotate down\n\
Left:		Rotate left\n\
Right:		Rotate right\n");
init_all();
init();
resize();
loop();
finish_all();
